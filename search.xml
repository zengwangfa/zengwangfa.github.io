<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LCD硬件原理及初始化</title>
      <link href="/2019/12/31/s3c2440-lcd/"/>
      <url>/2019/12/31/s3c2440-lcd/</url>
      
        <content type="html"><![CDATA[<h2 id="1-LCD与OLED的区别"><a href="#1-LCD与OLED的区别" class="headerlink" title="1.LCD与OLED的区别"></a>1.LCD与OLED的区别</h2><ul><li><p><strong>LCD背光源与OLED自发光</strong></p></li><li><p>LCD无机材料，LCD寿命较长。OLED广视角、几乎无穷高的对比度、可以弯曲、较低耗电优点。<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd&amp;oled.png" alt="LCD与OLED结构差异"></p></li></ul><h2 id="2-LCD原理"><a href="#2-LCD原理" class="headerlink" title="2.LCD原理"></a>2.LCD原理</h2><ul><li>屏幕上的每一个点称为像素</li><li>每个像素点由RGB三原色组成<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_scan.gif" alt="LCD Display a picture"></li></ul><h3 id="2-1-颜色如何确定？"><a href="#2-1-颜色如何确定？" class="headerlink" title="2.1 颜色如何确定？"></a>2.1 颜色如何确定？</h3><ul><li>由RGB三组信号线组成</li><li>由下原理图可知：R5条、G6条，B5条，即<code>RGB565</code>（彩色模式, <strong>一个像素占两个字节</strong>）</li><li>因此其每个像素占用多少位（<strong>BBP</strong>：bit per piexl）为2个字节<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_circuit.png" alt=""></li></ul><h3 id="2-2-LCD如何“行扫描”？"><a href="#2-2-LCD如何“行扫描”？" class="headerlink" title="2.2 LCD如何“行扫描”？"></a>2.2 LCD如何“行扫描”？</h3><ul><li>有一条CLK时钟线与LCD相连，每发出一次CLK(高低电平)，就移动一个像素。</li></ul><h3 id="2-3-如何跳到下一行进行“行扫描”？"><a href="#2-3-如何跳到下一行进行“行扫描”？" class="headerlink" title="2.3 如何跳到下一行进行“行扫描”？"></a>2.3 如何跳到下一行进行“行扫描”？</h3><ul><li>有一条HSYNC（<strong>水平同步信号</strong>）信号线与LCD相连，每发出一次脉冲(高低电平)，行扫描跳到下一行的起始位置。</li></ul><h3 id="2-4-如何进行下一个“场扫描”？"><a href="#2-4-如何进行下一个“场扫描”？" class="headerlink" title="2.4 如何进行下一个“场扫描”？"></a>2.4 如何进行下一个“场扫描”？</h3><ul><li>有一条VSYNC（<strong>垂直同步信号</strong>）信号线与LCD相连，每发出一次脉冲(高低电平)，就跳到原点。</li></ul><hr><blockquote><p>注意：RGB数据线上的数据从何而来？<br>内存里面手动划分一块显存(FrameBuffer)，里面存放了要显示的数据，LCD控制器从里面将数据读出来，通过RGB三组线传给LCD，再依次打到显示屏上。</p></blockquote><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_pin.png" alt="信号引脚标"></p><h2 id="3-LCD时序"><a href="#3-LCD时序" class="headerlink" title="3.LCD时序"></a>3.LCD时序</h2><ul><li>分辨率 = Hsync的个数 * 一行中的有效CLK</li></ul><p>完整时序图：<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_timing_diagram.png" alt="完整时序图"><br>形象时序图：<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_timing_xy.png" alt="形象时序图"></p><blockquote><p>以上两张图可以解释LCD控制时序中的<code>Hsync</code>与<code>Vsync</code>的协同（可以理解 一帧是一个垂直同步信号、一行是一个水平同步信号）</p><ul><li>1.首先一帧（Vsync）中有若干个行（Hsync），设为y，Vsync发出帧脉冲宽度<code>Tvp</code></li><li>2.经过 <code>Tvb</code> 时间，才可以发送一帧的数据，从第一行开始</li><li>3.其次一行（Hsync）中有若干个时钟信号（CLK），有效的设为x，Hsync发出脉冲宽度<code>Thp</code></li><li>4.经过 <code>Thb</code> 时间，才可以发送一行的数据</li><li>5.直到发送到一行的最后一个像素，经过 <code>Thf</code> 时间，才会有下一个水平同步信号（Hsync）</li><li>6.直到发送到最后一行，经过 <code>Tvf</code> 时间，才会有下一个垂直同步信号（Vsync）</li></ul></blockquote><p><strong>由上可知几个重要的信号引脚</strong>：<code>Hsync</code>、<code>Vsync</code> 、<code>CLK</code>、<code>Dn</code><br><strong>由上可知几个重要的时间参数</strong>：<code>Tvp</code>、<code>Tvb</code> 、<code>Thp</code>、<code>Thb</code>、<code>Thf</code> 、<code>Tvf</code> </p><h2 id="4-LCD控制器"><a href="#4-LCD控制器" class="headerlink" title="4.LCD控制器"></a>4.LCD控制器</h2><p>思路：</p><ul><li>1.取数据：把<code>FrameBuffer</code>的地址、<code>bpp</code>、<code>分辨率</code>告诉LCD控制器</li><li>2.发数据：把时序告诉LCD控制器、并设置引脚的极性（本款是下降沿取数据，但是有的LCD是上升沿有效，因此需要设置极性）</li></ul><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_controller_diagram.png" alt="LCD结构图"></p><h3 id="4-1-像素数据格式"><a href="#4-1-像素数据格式" class="headerlink" title="4.1 像素数据格式"></a>4.1 像素数据格式</h3><ul><li>使用的像素数格式如下：16BPP<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_data_format.png" alt="16BPP内存数据格式"></li></ul><p>565数据格式引脚连接图：<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/565_format_pin.png" alt="565数据格式引脚连接图"></p><h3 id="4-2-调色板"><a href="#4-2-调色板" class="headerlink" title="4.2 调色板"></a>4.2 调色板</h3><ul><li>本应该用<code>FrameBuffer</code>中用16bit表示1像素，可以用8bit存放在<code>FrameBuffer</code>来省空间</li><li>8bit存放的是调色板中颜色的索引（共256中16bit颜色）<blockquote><p>那么当使用像素深度为8pp时候，像素深度和我们的带宽不一致，我们的颜色要用16位表示，如果直接用上肯定不可能，那我们就可以选择用调色板，<strong>调色板中存放了256种16bpp的颜色</strong>，这时候我们color存放的就不是真实的颜色值了，而是存放的是调色板中256种颜色的<code>索引</code>，成线性关系一一对应，这样我们大大减轻了系统的负担。用16bpp还是8bpp这得取决实际情况，16bpp肯定比8pp清晰，但同时带来的负荷也更加重。</p></blockquote></li></ul><p>调色板工作示意图<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_palette.png" alt="调色板工作示意图"><br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_8bpp_fornat.png" alt="调色板8BPP"></p><h2 id="5-编程框架"><a href="#5-编程框架" class="headerlink" title="5.编程框架"></a>5.编程框架</h2><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_program_framework.png" alt="LCD编程框架"></p><p>面向对象编程<br>参数层：</p><ul><li>1.抽象出（不同设备）共同的参数结构体</li><li>2.上层的设备结构体指针指向所需的参数结构体</li></ul><hr><p>驱动层</p><ul><li>1.抽象不同平台的LCD控制器结构体</li><li>2.上层的LCD控制器结构体指针指向所需的结构体</li></ul><h2 id="6-结构体参数"><a href="#6-结构体参数" class="headerlink" title="6. 结构体参数"></a>6. 结构体参数</h2><h3 id="6-1-引脚极性结构体"><a href="#6-1-引脚极性结构体" class="headerlink" title="6.1 引脚极性结构体"></a>6.1 引脚极性结构体</h3><p>由上<a href="#3.LCD时序">3.LCD时序</a>可知几个重要的信号引脚：<code>Hsync</code>、<code>Vsync</code> 、<code>CLK</code>、<code>Dn</code>：<code>Hsync</code>、<code>Vsync</code> 、<code>CLK</code>、<code>Dn</code><br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/pins_polarity_reg.png" alt="引脚极性寄存器"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 引脚极性结构体 * NORMAL：正常极性 * INVERT：反转极性 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> pins_polarity<span class="token punctuation">{</span>    <span class="token keyword">int</span> vclk<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* normal：下降沿获取数据 */</span>    <span class="token keyword">int</span> rgb<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* normal：高电平表示1 */</span>    <span class="token keyword">int</span> hsync<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* normal：高脉冲 */</span>    <span class="token keyword">int</span> vsync<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* normal：高脉冲 */</span><span class="token punctuation">}</span>pins_polarity<span class="token punctuation">,</span> <span class="token operator">*</span>p_pins_polarity<span class="token punctuation">;</span></code></pre><h3 id="6-2-时序结构体"><a href="#6-2-时序结构体" class="headerlink" title="6.2 时序结构体"></a>6.2 时序结构体</h3><p>由上<a href="#3.LCD时序">3.LCD时序</a>可知几个重要的时间参数：<code>Tvp</code>、<code>Tvb</code> 、<code>Thp</code>、<code>Thb</code>、<code>Thf</code> 、<code>Tvf</code> </p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 时序结构体 * NORMAL：正常极性 * INVERT：反转极性 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> time_sequence<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 垂直方向 */</span>    <span class="token keyword">int</span> tvp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Vsync脉冲宽度 */</span>    <span class="token keyword">int</span> tvb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 上边黑框 Vertical Back porch */</span>    <span class="token keyword">int</span> tvf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 下边黑框 Vertical Front porch */</span>    <span class="token comment" spellcheck="true">/* 水平方向 */</span>    <span class="token keyword">int</span> thp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Hsync脉冲宽度 */</span>    <span class="token keyword">int</span> thb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 左边黑框 Horizontal Back porch*/</span>    <span class="token keyword">int</span> tvf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 右边黑框 Horizontal Front porch */</span><span class="token punctuation">}</span>time_sequence<span class="token punctuation">,</span><span class="token operator">*</span>p_time_sequence<span class="token punctuation">;</span></code></pre><h3 id="6-3-LCD控制器结构体"><a href="#6-3-LCD控制器结构体" class="headerlink" title="6.3 LCD控制器结构体"></a>6.3 LCD控制器结构体</h3><p>包含初始化、使能、禁止函数</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 抽象LCD控制器结构体 * 向上：接收不同的LCD参数 * 向下：使用这些参数设置对应的LCD Controller*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> lcd_controller<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>init<span class="token punctuation">)</span><span class="token punctuation">(</span>p_lcd_params plcdparams<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//禁止 </span><span class="token punctuation">}</span>lcd_controller<span class="token punctuation">,</span><span class="token operator">*</span>p_lcd_controller<span class="token punctuation">;</span></code></pre><h2 id="8-LCD控制器初始化"><a href="#8-LCD控制器初始化" class="headerlink" title="8.LCD控制器初始化"></a>8.LCD控制器初始化</h2><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_timing_conditions.png" alt="LCD时序时间表"></p><h3 id="8-1-LCDCON1"><a href="#8-1-LCDCON1" class="headerlink" title="8.1 LCDCON1"></a>8.1 LCDCON1</h3><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* LCDCON1[17:8] : CLKVAL, vclk = HCLK/[(CLKVAL+1)*2]      *                              = 100M/[(CLKVAL+1)*2]     *                           CLKVAL = 100/vclk/2 - 1 , vclk      * [6:5]：0b11，TFT LCD      * [4:1]：bpp mode      * [0]  ：LCD video output and the logic enable(1)/disable(0)    */</span>    <span class="token keyword">int</span> clkval  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">100</span><span class="token operator">/</span>plcdparams<span class="token operator">-></span>time_seq<span class="token punctuation">.</span>vclk<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bppmode <span class="token operator">=</span> <span class="token punctuation">(</span>plcdparams <span class="token operator">==</span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0x0B</span> <span class="token punctuation">:</span>\ <span class="token comment" spellcheck="true">//8bpp</span>                  <span class="token punctuation">(</span>plcdparams <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0x0C</span> <span class="token punctuation">:</span>\ <span class="token comment" spellcheck="true">//16bpp</span>                  <span class="token number">0x0D</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//24bpp </span>    LCDCON1 <span class="token operator">=</span> <span class="token punctuation">(</span>clkval <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>bppmode <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdcon1.png" alt=""></p><h2 id="7-初始化LCD引脚"><a href="#7-初始化LCD引脚" class="headerlink" title="7.初始化LCD引脚"></a>7.初始化LCD引脚</h2><ul><li>初始LCD专用引脚，配置其模式：<code>LCD Data</code> 与 <code>LCD Control</code></li></ul><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 初始化LCD引脚 */</span><span class="token keyword">void</span> <span class="token function">jz2440_pin_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 初始化 背光引脚： GPB0 */</span>    GPBCON <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x03</span><span class="token punctuation">;</span>    GPBCON <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出模式</span>    <span class="token comment" spellcheck="true">/* 初始化LCD专用引脚  */</span>    GPCCON <span class="token operator">=</span> <span class="token number">0xAAAAAAAA</span><span class="token punctuation">;</span>    GPDCON <span class="token operator">=</span> <span class="token number">0xAAAAAAAA</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 电源引脚 LCD_PWRDN */</span>    GPGCON <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>为了方便GPC、GPD两组，都设置为LCD专用引脚为 0xAAAAAAAA</p></blockquote><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_mode_pins.png" alt=""><br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/gpdcon1.png" alt=""><br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/gpccon1.png" alt=""><br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_pwren_pin.png" alt=""></p><hr><ul><li>由下图S3C2440 LCD控制器时序可得，在设置寄存器时需要在时间参数上-1<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/s3c2440_lcd_timing.png" alt=""><h3 id="8-2-LCDCON2"><a href="#8-2-LCDCON2" class="headerlink" title="8.2 LCDCON2"></a>8.2 LCDCON2</h3><pre class=" language-c"><code class="language-c">  <span class="token comment" spellcheck="true">/*  垂直   *  [31:24] ：VBPD    = Tvb - 1   *  [23:14] ：LINEVAL = line - 1  行数值   *  [13:6]  ：VFPD    = Tvf - 1    *  [5:0]    ：VSPW       = Tvp -1   */</span>  LCDCON2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>time_seq<span class="token punctuation">.</span>tvb <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> \            <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>yres <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span>         <span class="token operator">|</span> \            <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>time_seq<span class="token punctuation">.</span>tvf <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">|</span> \              <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>time_seq<span class="token punctuation">.</span>tvp <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdcon2_2.png" alt=""></p><h3 id="8-3-LCDCON3"><a href="#8-3-LCDCON3" class="headerlink" title="8.3 LCDCON3"></a>8.3 LCDCON3</h3><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*  水平                 *  [31:19] ：HBPD    = Thb - 1     *  [18:8]  ：HOZVAL  = 列 - 1  横向像素点     *  [7:0]   ：HFPD    = Thf - 1      */</span>    LCDCON3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>time_seq<span class="token punctuation">.</span>thb <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">|</span> \              <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>xres <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>             <span class="token operator">|</span> \              <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>time_seq<span class="token punctuation">.</span>thf <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdcon3.png" alt=""></p><h3 id="8-4-LCDCON4"><a href="#8-4-LCDCON4" class="headerlink" title="8.4 LCDCON4"></a>8.4 LCDCON4</h3><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*  [23:14] ：HSPW = thp - 1  行脉冲宽度     */</span>    LCDCON4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>time_seq<span class="token punctuation">.</span>thp <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdcon4.png" alt=""></p><h3 id="8-5-LCDCON5"><a href="#8-5-LCDCON5" class="headerlink" title="8.5 LCDCON5"></a>8.5 LCDCON5</h3><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* 用来设置引脚极性, 设置16bpp数据格式, 设置内存中象素存放的格式     * [12] : BPP24BL,This bit determines the order of 24 bpp video memory.     * [11] : FRM565, 1-565     * [10] : INVVCLK, 0 = The video data is fetched at VCLK falling edge     * [9]  : HSYNC是否反转     * [8]  : VSYNC是否反转     * [7]  : INVVD, rgb是否反转     * [6]  : INVVDEN     * [5]  : INVPWREN     * [4]  : INVLEND     * [3]  : PWREN, LCD_PWREN output signal enable/disable     * [2]  : ENLEND       * [1]  : BSWP     * [0]  : HWSWP     */</span>    pixelformat <span class="token operator">=</span> plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>bpp <span class="token operator">==</span> <span class="token number">24</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> \<span class="token operator">/</span><span class="token operator">/</span>24bpp                  plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>bpp <span class="token operator">==</span> <span class="token number">16</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> \ <span class="token comment" spellcheck="true">//16bpp</span>                  <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8ppp</span>    LCDCON5 <span class="token operator">=</span> <span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>vclk<span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span>\              <span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>hsync<span class="token operator">&lt;&lt;</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span>\              <span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>vsync<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span>\              <span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>rgb<span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">)</span>   <span class="token operator">|</span>\              <span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>de<span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">|</span>\              <span class="token punctuation">(</span>plcdparams<span class="token operator">-></span>pins_pol<span class="token punctuation">.</span>pwren<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span>\              <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> pixelformat<span class="token punctuation">;</span></code></pre><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdcon5_1.png" alt=""><br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdcon5_2.png" alt=""></p><h3 id="8-6-LCDSADDR"><a href="#8-6-LCDSADDR" class="headerlink" title="8.6 LCDSADDR"></a>8.6 LCDSADDR</h3><ul><li>由下图可知：是将fb_base的[30:1]直接写入LCDSADDR1寄存器</li></ul><blockquote><p>起始地址<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdsaddr1.png" alt=""></p></blockquote><blockquote><p>结束地址 = 起始地址 + x * y * bpp/8<br>即为：起始地址+一帧所占空间大小<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcdsaddr2.png" alt=""></p></blockquote><h2 id="9-构造LCD参数结构体"><a href="#9-构造LCD参数结构体" class="headerlink" title="9.构造LCD参数结构体"></a>9.构造LCD参数结构体</h2><blockquote><p>对于该款4.3寸LCD而言的参数设置</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 该款4.3寸 LCD参数结构体 */</span>lcd_params lcd_4_3_params<span class="token punctuation">{</span>     <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lcd4.3"</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>pins_pol <span class="token operator">=</span> <span class="token punctuation">{</span>        vclk  <span class="token operator">=</span> NORMAL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* normal：下降沿获取数据 */</span>        hsync <span class="token operator">=</span> INVERT<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* normal：高脉冲 */</span>        vsync <span class="token operator">=</span> INVERT<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* normal：高脉冲 */</span>        rgb   <span class="token operator">=</span> NORMAL<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* normal：高电平表示1 */</span>        de    <span class="token operator">=</span> NORMAL<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* normal：高电平使能 data enable */</span>        pwren <span class="token operator">=</span> NORMAL<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* normal：高电平使能power enable */</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>time_seq <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 垂直方向 */</span>        tvp <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* Vsync脉冲宽度 */</span>        tvb <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* 上边黑框 Vertical Back porch */</span>        tvf <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* 下边黑框 Vertical Front porch */</span>        <span class="token comment" spellcheck="true">/* 水平方向 */</span>        thp <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* Hsync脉冲宽度 */</span>        thb <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* 左边黑框 Horizontal Back porch*/</span>        thf <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* 右边黑框 Horizontal Front porch */</span>        vlck <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/* MHz */</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span>xres <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>yres <span class="token operator">=</span> <span class="token number">272</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>bpp  <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* 16bit */</span>    <span class="token punctuation">.</span>fb_base<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/lcd_timing_params.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> S3C2440 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCD </tag>
            
            <tag> ARM9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nand Flash编程</title>
      <link href="/2019/12/27/s3c2440-nand/"/>
      <url>/2019/12/27/s3c2440-nand/</url>
      
        <content type="html"><![CDATA[<h2 id="1-读芯片ID"><a href="#1-读芯片ID" class="headerlink" title="1.读芯片ID"></a>1.读芯片ID</h2><h3 id="1-1-读芯片ID时序"><a href="#1-1-读芯片ID时序" class="headerlink" title="1.1 读芯片ID时序"></a>1.1 读芯片ID时序</h3><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_timing.png" alt=""></p><p> 简化为4个步骤：</p><ul><li><p>1.使能片选</p></li><li><p>2.写命令0x90</p></li><li><p>3.写地址0x00</p></li><li><p>4.读ID信息</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 识别NAND FLASH */</span><span class="token keyword">void</span> <span class="token function">scan_nand_flash</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存读取ID信息的数组</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> id_info<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">nand_enable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能CS</span> <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">nand_write_addr</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     id_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">nand_read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">nand_disable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//禁止CS</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Maker  Code: 0x%x\r\n"</span><span class="token punctuation">,</span>id_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Device Code: 0x%x\r\n"</span><span class="token punctuation">,</span>id_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3rd   cycle: 0x%x\n\r"</span><span class="token punctuation">,</span>id_info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Page   size: %d KB\n\r"</span><span class="token punctuation">,</span><span class="token number">1</span>  <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>id_info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页大小与id_info[3]最低2位有关</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Block  size: %d KB\n\r"</span><span class="token punctuation">,</span><span class="token number">64</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>id_info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//块大小与id_info[3]第4、5位有关</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5th   cycle: 0x%x\n\r"</span><span class="token punctuation">,</span>id_info<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-2-由ID数据获得芯片参数"><a href="#1-2-由ID数据获得芯片参数" class="headerlink" title="1.2 由ID数据获得芯片参数"></a>1.2 由ID数据获得芯片参数</h3><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_scan_test.png" alt=""></p></li></ul><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_chip_params.png" alt=""></p><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_scan_test2.png" alt=""></p><ul><li>ID信息的第4字节为<code>0x95</code></li><li>页大小与id_info[3]最低2位有关，可得<strong>页大小</strong>为：<code>2KB</code></li><li>块大小与id_info[3]第4、5位有关，可得<strong>块大小</strong>为：<code>128KB</code></li></ul><blockquote><p>注意：如果此时烧写到Nand Flash，并从Nand Flash启动程序是不会成功的，因为这个bin文件大小已经超过了4K，且现在还没有实现nand flash的读函数。</p></blockquote><h2 id="2-读数据"><a href="#2-读数据" class="headerlink" title="2.读数据"></a>2.读数据</h2><blockquote><p>目标：实现从NAND FLASH中启动，重定位所有数据至SDRAM，并实现读取芯片ID数据</p></blockquote><h3 id="2-1-NAND内部结构分析"><a href="#2-1-NAND内部结构分析" class="headerlink" title="2.1 NAND内部结构分析"></a>2.1 NAND内部结构分析</h3><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_struct.png" alt=""></p><ul><li>OOB：out of bank（在bank之外）<br>由上图可得：</li><li>1Page = 2KB + 64B</li><li>1Block = 64 * Pages = 128KB + 4KB</li><li>1Device = 2048 * Blocks = 256MB + 8MB</li></ul><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_data_store.png" alt=""></p><ul><li>OOB区的作用：因为nand的缺点是会发生<code>“位反转”</code>，为了解决这个问题，nand中的OOB区，<strong>用于校验数据区的数据是否发生错误</strong>，当有错误时，可以恢复数据。（其本身不存储数据）</li><li>因为OOB中并不存放数据，只是用于校验数据区是否发生错误，因此当CPU读取Nand Flash<strong>第2048</strong>个数据，该数据为 <code>Page1中的第0个byte</code></li></ul><h3 id="2-2-地址序列与时序"><a href="#2-2-地址序列与时序" class="headerlink" title="2.2 地址序列与时序"></a>2.2 地址序列与时序</h3><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_addr.png" alt=""></p><ul><li>由地址序列可以看出：发出地址信号共需5个周期，前2个周期发出列地址（Column Address），后3个周期发出行地址（Row Address）</li><li>地址线序列有一些位是没有用到的，其目的也是以后兼容更大芯片的nand falsh<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_read_timing.png" alt=""></li></ul><blockquote><p>Nand Flash内部结构展开大致如下：<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_struct2.png" alt=""></p></blockquote><h3 id="2-3-读数据流程"><a href="#2-3-读数据流程" class="headerlink" title="2.3 读数据流程"></a>2.3 读数据流程</h3><ul><li>1.发出片选信号</li><li>2.发出0x00命令</li><li>3.<strong>发送5个周期的地址（两个列地址，三个行地址（page））</strong></li><li>4.再发送0x30命令</li><li>5.等待就绪</li><li>6.读数据</li><li>7.禁止片选</li></ul><h3 id="2-4-转换所读地址的列与页"><a href="#2-4-转换所读地址的列与页" class="headerlink" title="2.4 转换所读地址的列与页"></a>2.4 转换所读地址的列与页</h3><p>将输入的地址addr转换为：</p><ul><li>列地址（Col Address）<ul><li>page是定位到哪一个页，col变量定位的就是在这个页的偏移量（在这个页上的第几列0~2047）</li></ul></li><li>行地址（页）<ul><li>因为读取数据的时候是一次性读出一页，因此当给出地址addr之后，每一页的数据大小是2K，因此我们可以根据地址知道我们读取的数据是哪一个页</li></ul></li></ul><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> col  <span class="token operator">=</span> addr <span class="token operator">%</span> <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列地址  addr &amp;(2048-1); </span>    <span class="token keyword">int</span> page <span class="token operator">=</span> addr <span class="token operator">/</span> <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行地址（相当于页地址）</span></code></pre><h3 id="2-5-NAND等待就绪"><a href="#2-5-NAND等待就绪" class="headerlink" title="2.5 NAND等待就绪"></a>2.5 NAND等待就绪</h3><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_nfcon.png" alt=""></p><ul><li>当NFSATA[0] = 0时，表示正忙</li><li>当NFSATA[0] = 1时，表示就绪<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 等待NAND就绪 */</span><span class="token keyword">void</span> <span class="token function">nand_wait_ready</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>NFSTAT <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当NFSATA[0] = 1时，表示就绪</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2-6-读取数据函数"><a href="#2-6-读取数据函数" class="headerlink" title="2.6 读取数据函数"></a>2.6 读取数据函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* NAND FLASH读取数据 * param:读取的地址、存放的地址、读取的长度 */</span><span class="token keyword">void</span> <span class="token function">read_nand_data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*page是定位到哪一个页，col变量定位的就是在这个     *页的偏移量（在这个页上的第几列0~2047）     */</span>    <span class="token keyword">int</span> col  <span class="token operator">=</span> addr <span class="token operator">%</span> <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列地址  addr &amp;(2048-1); </span>    <span class="token comment" spellcheck="true">/* 因为读取数据的时候是一次性读出一页，因此当给出     * 地址addr之后，每一页的数据大小是2K，因此我们可以     * 根据地址知道我们读取的数据是哪一个页     */</span>    <span class="token keyword">int</span> page <span class="token operator">=</span> addr <span class="token operator">/</span> <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行地址（相当于页地址）</span>    <span class="token function">nand_enable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.使能CS</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//2.发出0x00命令</span>        <span class="token comment" spellcheck="true">/* col addr */</span>        <span class="token function">nand_write_addr</span><span class="token punctuation">(</span>col <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.发出地址</span>        <span class="token function">nand_write_addr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>col <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/* row/page addr */</span>        <span class="token function">nand_write_addr</span><span class="token punctuation">(</span>page <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">nand_write_addr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">nand_write_addr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.发出0x30命令</span>        <span class="token function">nand_wait_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5.等待就绪</span>        <span class="token comment" spellcheck="true">/* for循环中有2个条件         * 1.当读到页尾，但还是没有读完，说明需要读取下一页         * 2.当已经读取指定字节数，则不再读取         */</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>col <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//6.读数据</span>            buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">nand_read_data_byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        page<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向下一页</span>    <span class="token punctuation">}</span>    <span class="token function">nand_disable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//7.禁止CS</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-NAND重定位"><a href="#2-7-NAND重定位" class="headerlink" title="2.7 NAND重定位"></a>2.7 NAND重定位</h3><blockquote><p>从Nand Flash启动，此时片内SRAM的地址对应的就是CPU的0地址，如果从Nand Flash启动，2440硬件会把nand Flash前4K的数据复制到片内SRAM,如果Nand Flash上的程序大于4K,那后续数据就会丢失，相当于只重定位了前4K的代码。</p></blockquote><p>如何解决上述问题：</p><ul><li>1.前提：实现了NAND FLASH读取数据函数</li><li>2.代码烧写到NAND FLASH,并从NAND中启动</li><li>3.程序运行到重定位代码的位置判断一下，是从Nand Flash启动还是NOR  Flash启动（通过往0地址写数据，因为Nand是支持读写的，所以读出的结果和写的结果一样，而NOR Flash不能像内存一样读写，因此读写的内容是不一致的）</li><li>4.如果从NOR Flash启动，直接使用简单的重定位代码就行，如果是Nand Flash启动，那就是用Nnad Flash的读函数进行代码的重定位。</li></ul><hr><blockquote><p>首先判断从NorFlash or NandFlash中启动</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 检查是否从NorFlash中启动 * 方法：写0x12345678到0地址，在读取出来，如果得到0x12345678，表示0地址上的内容被修改，即为片内RAM，则为nand启动 * 原因：原因：nor不能直接写入，写入需要发出一定格式的数据，才能写入 * 返回0为nand启动，返回1为nor启动*/</span><span class="token keyword">int</span> <span class="token function">isBootFromNorFlash</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暂存[0]上的数据</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0xdeadc0de</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dead code任意值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0xdeadc0de</span> <span class="token operator">==</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 写成功，对应nand启动 */</span>        <span class="token operator">*</span>p <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//恢复原来的值</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>重定位代码</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * 将除bss段的全部数据拷贝到sdram中 * 传递形参，原地址src:_start  目标地址dest:__bss_start  长度len:__bss_start-_star */</span><span class="token keyword">void</span> <span class="token function">copy_to_sdram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 要从lds文件中获取__code_start、__bss_start     * 然后从0地址把数据复制到__code_start     */</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> __code_start<span class="token punctuation">,</span>__bss_start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明外部变量</span>    <span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>src  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flash中0地址 </span>    <span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>dest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>__code_start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//目标地址：sdram中的0x30000000地址</span>    <span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>end  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>__bss_start<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结束地址：bss的起始地址</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>__bss_start <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>__code_start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取数据总长度</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isBootFromNorFlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果从Nor中启动</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>dest <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拷贝</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从Nand中启动,需要先初始化nand，然后重定位代码</span>        <span class="token function">nand_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从 src 复制到 des ,总共复制len字节，也就是重定位的代码</span>        <span class="token function">read_nand_data</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>src<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-读数据测试"><a href="#2-7-读数据测试" class="headerlink" title="2.7 读数据测试"></a>2.7 读数据测试</h3><blockquote><p>读取0地址后160bytes的数据，如果跟.bin文件前160字节数据相同，则读取成功，否则读取失败</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 测试函数：读数nand上160bytes数据  */</span><span class="token keyword">void</span> <span class="token function">read_nand_flash</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">,</span>hex_addr<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span>str<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 获得地址 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*****Enter the address to read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr <span class="token operator">=</span> <span class="token function">get_uint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read_nand_data</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到地址上的数据</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p指向data,用于打印data数据</span>    hex_addr <span class="token operator">=</span> addr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//起始地址</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read Data:\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"            00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 长度固定为160 bytes */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%08x  "</span><span class="token punctuation">,</span>hex_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每行打印16个16进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取16个</span>            str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存字符</span>            <span class="token comment" spellcheck="true">//先打印数值</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" | "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后打印字符</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0x20</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不可视字符,打印‘.’</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        hex_addr<span class="token operator">+</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换行+16</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_bin_data.png" alt=""></p><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_read_test2.png" alt=""><br>由上测试可知读取成功</p><h2 id="3-擦除"><a href="#3-擦除" class="headerlink" title="3.擦除"></a>3.擦除</h2><h3 id="3-1-擦除时序"><a href="#3-1-擦除时序" class="headerlink" title="3.1 擦除时序"></a>3.1 擦除时序</h3><ul><li>1.发出片选信号</li><li>2.发出0x60命令</li><li>3.<strong>发送3个行地址（page）</strong></li><li>4.再发送0xD0命令</li><li>5.等待就绪（等待擦除完成）</li><li>6.禁止片选</li></ul><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_erase_timing.png" alt=""></p><h3 id="3-2-地址和参数合法性"><a href="#3-2-地址和参数合法性" class="headerlink" title="3.2 地址和参数合法性"></a>3.2 地址和参数合法性</h3><ul><li>由于按块来擦除（128KB），因此地址和参数都必须是128K的倍数</li><li><pre class=" language-c"><code class="language-c">  <span class="token comment" spellcheck="true">/* 检查参数合法性 */</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x1FFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//128K</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Err addr! Please enter an integral multiple of 128K\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x1FFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//128K</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Err len! Please enter an integral multiple of 128K\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="3-3-擦除函数"><a href="#3-3-擦除函数" class="headerlink" title="3.3 擦除函数"></a>3.3 擦除函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* NAND FLASH擦除数据 * param:擦除的起始地址、擦除的长度(byte) * ret:失败-1，成功0*/</span><span class="token keyword">int</span> <span class="token function">erase_nand_data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> page <span class="token operator">=</span> addr <span class="token operator">/</span> <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行地址</span>    <span class="token comment" spellcheck="true">/* 检查参数合法性 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x1FFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//128K</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Err addr! Please enter an integral multiple of 128K\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x1FFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//128K</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Err len! Please enter an integral multiple of 128K\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 1.使能CS */</span>    <span class="token function">nand_enable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        page <span class="token operator">=</span> addr <span class="token operator">/</span> <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行地址</span>        <span class="token comment" spellcheck="true">/* 2.发出0x60命令 */</span>        <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 3.发出地址row/page addr */</span>        <span class="token function">nand_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* 4.发出0xD0命令 */</span>        <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0xD0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 5.等待就绪(等待擦除完成) */</span>        <span class="token function">nand_wait_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            len <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//长度减去一个block</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        addr <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向下一块</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 6.禁止CS */</span>    <span class="token function">nand_disable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-擦除数据测试"><a href="#3-4-擦除数据测试" class="headerlink" title="3.4 擦除数据测试"></a>3.4 擦除数据测试</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 擦除测试函数：固定擦除一个1block = 128K*/</span><span class="token keyword">void</span> <span class="token function">erase_nand_flash</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> addr<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> whichblock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 获得第几个Block */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the address of sector to erase: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr <span class="token operator">=</span> <span class="token function">get_uint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    whichblock <span class="token operator">=</span> addr <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** block number : [ %d ]\r\n"</span><span class="token punctuation">,</span>whichblock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 提示擦除数据的范围 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** Erase range : 0x%08x - 0x%08x\n\r"</span><span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** erase ...\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">erase_nand_data</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果擦除成功</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** Erase finished!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** Erase fail!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_erase_test.png" alt=""></p><h2 id="4-写数据"><a href="#4-写数据" class="headerlink" title="4.写数据"></a>4.写数据</h2><h3 id="4-1-写数据时序"><a href="#4-1-写数据时序" class="headerlink" title="4.1 写数据时序"></a>4.1 写数据时序</h3><ul><li>1.发出片选信号</li><li>2.发出0x80命令</li><li>3.<strong>发送5个周期的地址（两个列地址，三个行地址（page））</strong></li><li>4.写入数据</li><li>5.再发送0x10命令</li><li>6.等待就绪（等待擦除完成）</li><li>7.禁止片选<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_wriet_timing.png" alt=""></li></ul><h3 id="4-2-写数据函数"><a href="#4-2-写数据函数" class="headerlink" title="4.2 写数据函数"></a>4.2 写数据函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* NAND FLASH写入数据 * param:写入的地址、数据指针、写入的长度 */</span><span class="token keyword">void</span> <span class="token function">write_nand_data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> page <span class="token operator">=</span> addr <span class="token operator">/</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">2048</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 1.使能CS */</span>    <span class="token function">nand_enable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 2.发出0x80命令 */</span>        <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 3.发出地址 */</span>        <span class="token function">nand_col</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">nand_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 4.写入数据*/</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>col <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">nand_write_data_byte</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 5.发出0x10命令 */</span>        <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 6.等待就绪(等待写入完成) */</span>        <span class="token function">nand_wait_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            page<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 7.禁止CS */</span>    <span class="token function">nand_disable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-写数据测试"><a href="#4-3-写数据测试" class="headerlink" title="4.3 写数据测试"></a>4.3 写数据测试</h3><blockquote><p>此处注意：一般在烧写数据之前需要对数据进行擦除操作，除非原本的数据全f，否则都需要进行擦除，不然写入的数据会有问题。</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">write_nand_flash</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 获得第几个Block */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** Enter addr to write: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr <span class="token operator">=</span> <span class="token function">get_uint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** Enter the string to write: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** write range : 0x%08x - 0x%08x\r\n"</span><span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** writing ...\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write_nand_data</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//strlen不包括结束符'\0'，因此需要+1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** writing finished\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>在<code>0x100000</code>地址写入“hello,world!”<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_write_test.png" alt=""></li><li>读取数据<br><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_read_test3.png" alt=""></li></ul><h2 id="5-判断是否为坏块"><a href="#5-判断是否为坏块" class="headerlink" title="5.判断是否为坏块"></a>5.判断是否为坏块</h2><p><img src="http://q3996b08i.bkt.clouddn.com/embedded-study/nand_data_store.png" alt=""></p><blockquote><p>通过读取OOB区的第0个字节（即第<code>2048</code>个字节）来判断，如果不是0xFF，为坏块，否则不是</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 判断是否为坏块 * ret:返回1为坏块，返回0不是 */</span><span class="token keyword">int</span> <span class="token function">isNandBadBlock</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取OOB区第0个字节</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> page <span class="token operator">=</span> addr <span class="token operator">/</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 1. 选中 */</span>    <span class="token function">nand_enable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 2. 发出读命令00h */</span>    <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 3. 发出地址(分5步发出) */</span>    <span class="token function">nand_col</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">nand_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 4. 发出读命令30h */</span>    <span class="token function">nand_write_cmd</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 5. 判断状态,等待就绪 */</span>    <span class="token function">nand_wait_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 6. 读数据 */</span>    val <span class="token operator">=</span> <span class="token function">nand_read_data_byte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 7. 取消选中 */</span>        <span class="token function">nand_disable_cs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 坏块 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-ECC"><a href="#6-ECC" class="headerlink" title="6.ECC"></a>6.ECC</h2><ul><li>ECC（Error Checking and Correction），是一种用于Nand的差错检测和修正算法。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> S3C2440 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM9 </tag>
            
            <tag> Nand </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用的网站及工具</title>
      <link href="/2019/12/25/websites/"/>
      <url>/2019/12/25/websites/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/web_logo.png" alt=""></p><h2 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h2><h3 id="1-LeetCode：算法必备"><a href="#1-LeetCode：算法必备" class="headerlink" title="1. LeetCode：算法必备"></a>1. LeetCode：算法必备</h3><ul><li><p><a href="https://leetcode-cn.com//" target="_blank" rel="noopener">LeetCode</a></p><blockquote><p> 数据结构与算法，熟悉各互联网公司的算法题目</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/leetcode.png" alt=""></p></li></ul><h2 id="图片-图标类"><a href="#图片-图标类" class="headerlink" title="图片/图标类"></a>图片/图标类</h2><h3 id="1-Unsplash：优美免费无版权高清图片"><a href="#1-Unsplash：优美免费无版权高清图片" class="headerlink" title="1. Unsplash：优美免费无版权高清图片"></a>1. Unsplash：优美免费无版权高清图片</h3><ul><li><p><a href="https://unsplash.com/" target="_blank" rel="noopener">Unsplash 官网</a> </p><blockquote><p>优美免费无版权高清图片壁纸设计素材资源网站</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/unsplash.png" alt=""></p></li></ul><h3 id="2-Iconfont：阿里巴巴矢量图标库"><a href="#2-Iconfont：阿里巴巴矢量图标库" class="headerlink" title="2. Iconfont：阿里巴巴矢量图标库"></a>2. Iconfont：阿里巴巴矢量图标库</h3><ul><li><p><a href="https://www.iconfont.cn" target="_blank" rel="noopener">Iconfont 官网</a> </p><blockquote><p>Iconfont-阿里巴巴矢量图标库，国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/iconfont.png" alt=""></p></li></ul><h2 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h2><h3 id="1-Process-On：免费在线作图，实时协作"><a href="#1-Process-On：免费在线作图，实时协作" class="headerlink" title="1. Process On：免费在线作图，实时协作"></a>1. Process On：免费在线作图，实时协作</h3><ul><li><p><a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn 官网</a></p><blockquote><p>ProcessOn是一个在线作图工具的聚合平台，它可以在线画流程图、思维导图、UI原型图、UML、网络拓扑图、组织结构图等等。</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/processon.png" alt=""></p></li></ul><h3 id="2-3DContentCentral：免费-3D-CAD-模型"><a href="#2-3DContentCentral：免费-3D-CAD-模型" class="headerlink" title="2. 3DContentCentral：免费 3D CAD 模型"></a>2. 3DContentCentral：免费 3D CAD 模型</h3><ul><li><p><a href="https://www.3dcontentcentral.cn/" target="_blank" rel="noopener">3DContentCentral 官网</a></p><blockquote><p>免费 3D CAD 模型、2D 工程图和供应商目录</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/3dcontentcentral.png" alt=""></p></li></ul><h2 id="办公类"><a href="#办公类" class="headerlink" title="办公类"></a>办公类</h2><h3 id="1-Worktile：团队协作，任务分配"><a href="#1-Worktile：团队协作，任务分配" class="headerlink" title="1. Worktile：团队协作，任务分配"></a>1. Worktile：团队协作，任务分配</h3><ul><li><p><a href="https://worktile.com/" target="_blank" rel="noopener">Worktile 官网</a></p><blockquote><p>Worktile 是一站式敏捷研发与DevOps平台，提升研发效能，助力更好更快地发布产品。</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/worktile.png" alt=""></p></li></ul><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="1-ALLDATASHEET：必备的数据手网站"><a href="#1-ALLDATASHEET：必备的数据手网站" class="headerlink" title="1. ALLDATASHEET：必备的数据手网站"></a>1. ALLDATASHEET：必备的数据手网站</h3><ul><li><p><a href="https://www.alldatasheet.com/" target="_blank" rel="noopener">ALLDATASHEET 官网</a></p><blockquote><p>不用注册，而且是免费的，Alldatasheet向所有的人免费提供半导体以及电子产品数据表Alldatasheet 的主要使用群是从事工程师&amp;工程设计管理以及设计&amp;开发等。</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/alldatasheet.png" alt=""></p></li></ul><h3 id="2-Shields：Github徽章"><a href="#2-Shields：Github徽章" class="headerlink" title="2. Shields：Github徽章"></a>2. Shields：Github徽章</h3><ul><li><p><a href="https://shields.io/" target="_blank" rel="noopener">Shields 官网</a></p><blockquote><p>开源项目的质量数据标识</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/shields.png" alt=""></p></li></ul><h3 id="3-CodeIF：变量命名神器"><a href="#3-CodeIF：变量命名神器" class="headerlink" title="3. CodeIF：变量命名神器"></a>3. CodeIF：变量命名神器</h3><ul><li><p><a href="https://unbug.github.io/codelf/" target="_blank" rel="noopener">CodeIF 官网</a></p><blockquote><p>通过搜索GitHub, Bitbucket, GitLab来找到真实的使用变量名</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/codeif.png" alt=""></p><h3 id="4-印象笔记：全平台电子笔记"><a href="#4-印象笔记：全平台电子笔记" class="headerlink" title="4. 印象笔记：全平台电子笔记"></a>4. 印象笔记：全平台电子笔记</h3></li><li><p><a href="https://www.yinxiang.com/" target="_blank" rel="noopener">印象笔记 官网</a></p><blockquote><p>一站式地完成信息的收集备份、永久保存和高效整理。模板、清单、思维导图、印象笔记·剪藏等多种特色功能，全面提升你的日常效率。</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/yinxiang.png" alt=""></p></li></ul><h3 id="5-牛客：求职必备网站"><a href="#5-牛客：求职必备网站" class="headerlink" title="5. 牛客：求职必备网站"></a>5. 牛客：求职必备网站</h3><ul><li><p><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客 官网</a></p><blockquote><p>面经、面试题、求职信息</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/newcoder.png" alt=""></p></li></ul><h3 id="6-MaHua：在线markdown编辑器"><a href="#6-MaHua：在线markdown编辑器" class="headerlink" title="6.MaHua：在线markdown编辑器"></a>6.MaHua：在线markdown编辑器</h3><ul><li><a href="http://mahua.jser.me/" target="_blank" rel="noopener">MaHua 官网</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DJI大疆嵌入式秋招记录</title>
      <link href="/2019/10/01/dji-offer/"/>
      <url>/2019/10/01/dji-offer/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/DJI_offer1.png" alt=""></p><blockquote><p>写在前面的话：2020秋招形式严峻，此间过程也是十分心酸，能拿到理想的offer，也是十分幸运，希望“疆”来继续up~。</p></blockquote><h2 id="1-投递简历"><a href="#1-投递简历" class="headerlink" title="1.投递简历"></a>1.投递简历</h2><pre><code>2019.7.26（我的投递时间）岗位：嵌入式软件工程师（上海）</code></pre><h3 id="1-1-职位要求"><a href="#1-1-职位要求" class="headerlink" title="1.1 职位要求"></a>1.1 职位要求</h3><blockquote><p>职位职责：<br>    1. 负责硬件平台bring up；<br>    2. 负责底层驱动及上层应用的开发和调试；<br>    3. 负责Linux内核和用户空间程序开发和调试；<br>    4. 负责产品性能优化和稳定性调试；<br>    5. 负责相关技术文档的编写。</p></blockquote><hr><blockquote><p>任职要求：<br>    1. 本科及以上学历，计算机、电子、通信、自动化或软件相关专业；<br>    2. 熟悉C/C++编程语言，具有良好的代码编写习惯；<br>    3. 具有扎实的数字电路、模拟电路、微机原理等专业理论基础知识；<br>    4. 具有一定的硬件基础知识，能够看懂原理图，掌握基本的硬件调试工具的使用方法（如示波器、逻辑分析仪等）；<br>    5. 具有嵌入式相关开发经验，熟悉ARM/DSP等任一平台的体系架构；<br>    6. 熟悉一种以上常用外设接口，如USB/UART/I2C/SPI/CAN等；<br>    7. 至少具备以下条件之一：<br>    （a）熟悉Linux或者某一款RTOS，了解其操作系统原理，具有驱动开发或者应用开发经验；<br>    （b）熟悉Linux/RTOS内核调试工具、内存管理、线程、任务调度、中断管理和存储等模块，具有实战经验；<br>    （c）熟悉音、视频编解码，具有流媒体相关开发经验，了解V4L2、ALSA、DRM等驱动框架；<br>    （d）熟悉Linux网络驱动和协议栈，有无线网卡、BT等驱动开发经验；<br>    8. 英语CET4或同等水平以上，具有良好的英语阅读能力；<br>    9. 具备较强的学习、沟通表达能力和良好的团队合作精神；<br>    10. 具有无人机、机器人开发经验或有各类电子设计竞赛经验者优</p></blockquote><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/DJI2.jpg" alt=""></p><h3 id="1-2-投递网址"><a href="#1-2-投递网址" class="headerlink" title="1.2 投递网址"></a>1.2 <a href="https://we.dji.com/zh-CN" target="_blank" rel="noopener">投递网址</a></h3><ul><li>网申投递简历主要为以下几个方面：<ul><li>基本信息（必填）</li><li>教育背景（必填）</li><li>工作/实习经历</li><li>项目/活动经历</li><li>证书/个人技能</li><li>附件作品</li></ul></li></ul><h3 id="1-3-建议"><a href="#1-3-建议" class="headerlink" title="1.3 建议"></a>1.3 建议</h3><ul><li>最好有 Github开源项目、个人博客或个人主页，可以添加在<strong>附件作品</strong>中</li><li>可以关注【<strong>DJI大疆招聘</strong>】公众号，可以随时查看自己的招聘进展</li><li>有时候招聘信息邮件会被邮箱误认为“垃圾邮件”，因此大家也需要经常看看“垃圾邮件”中有没有招聘信息的邮件</li></ul><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/DJI1.jpg" alt=""></p><h2 id="2-在线测评"><a href="#2-在线测评" class="headerlink" title="2.在线测评"></a>2.在线测评</h2><p><code>2019.7.27（我的测评时间）</code></p><ul><li>测评题目完全是DJI自己出题<ul><li>计算题</li><li>逻辑题</li><li>企业了解</li><li>企业文化匹配</li><li>性格测试</li><li>行测</li></ul></li></ul><h2 id="3-笔试题"><a href="#3-笔试题" class="headerlink" title="3.笔试题"></a>3.笔试题</h2><p><code>2019.7.28（我的测评时间）</code></p><h3 id="3-1-选择填空题"><a href="#3-1-选择填空题" class="headerlink" title="3.1 选择填空题"></a>3.1 选择填空题</h3><ul><li>结构体、联合体</li><li>大小端</li><li>指针</li><li>数组</li><li>RTOS相关基础知识</li><li>Liunx相关基础知识</li></ul><h3 id="3-2-简答题"><a href="#3-2-简答题" class="headerlink" title="3.2 简答题"></a>3.2 简答题</h3><ul><li>线程间同步的方式</li><li>设计一个锁：<br>同步锁问题已解决，但因为优先级相同的任务会一直无法获得锁，设计让任务先来先运行的方法（包括这种方法的数据结构），此方法占用多少字节</li></ul><h3 id="3-3-编程题"><a href="#3-3-编程题" class="headerlink" title="3.3 编程题"></a>3.3 编程题</h3><ul><li>1.字符串比较函数</li><li>2.找出3x3矩阵里行最大同时列最小的数所在的坐标</li></ul><hr><ul><li>感觉笔试题内容十分符合岗位，比较具有针对性</li></ul><h2 id="4-一面"><a href="#4-一面" class="headerlink" title="4.一面"></a>4.一面</h2><p><code>2019.8.20（我的一面时间）</code><br><code>电话面试（大概25min）</code></p><ul><li>简单的自我介绍</li><li>项目（整体介绍项目工作流程、组成部分）<ul><li>对项目进行详细地问，惊叹于面试官的知识储量，会清晰地抓住你表述中的漏洞，因此表述中需要清晰有条理（当时有点紧张）</li></ul></li><li>项目中你所负责的部分</li><li>说说你对RT-Thread操作系统的了解（因为我项目当中用的是RT-Thread）</li><li>是否了解队列优先级</li><li>Liunx</li><li>ARM体系结构</li><li>操作系统，任务调度，优先级，同步等</li><li>有什么想问的</li><li><blockquote><p><code>小建议</code><br>自我介绍尽量简洁1分钟左右，突出与面试岗位所符合的经历<br>项目细节需要</p></blockquote></li></ul><h2 id="5-二面"><a href="#5-二面" class="headerlink" title="5.二面"></a>5.二面</h2><p><code>2019.8.27（我的二面时间）</code><br><code>电话面试（大概20min）</code></p><ul><li>简单的自我介绍</li><li>同学对你的评价</li><li>用三句话概况你的优点<ul><li>建议最好和所面试的岗位相关</li></ul></li><li>你作为项目组长如何安排分工，为什么</li><li>项目深挖</li><li>你有什么缺点</li><li>有什么想问的</li><li>…</li></ul><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/DJI3.jpg" alt=""></p><h2 id="6-终面"><a href="#6-终面" class="headerlink" title="6.终面"></a>6.终面</h2><p><code>2019.9.8 13:00（我的终面时间）</code><br><code>深圳DJI展厅面试（大概40min）</code><br><code>获得</code>DJI CAMPUS<code>手环一只</code></p><ul><li>挑一个你最有成就感的项目，该项目分为哪几个部分（软硬件上）</li><li>该项目所遇到的一个较大的问题</li><li>你主导的项目中，如何划分团队分工</li><li>如果你作为无人机总设计师会分为哪几个方面？分别的作用是什么？<ul><li>当时把DJI线上宣讲会看了好几遍，里面DJI首席技术官有提到（这让我让我更加清晰明了地表达出来）</li></ul></li><li>互斥量与信号量的区别</li><li>如果已经实现了一个互斥量，如何改进实现信号量</li><li>怎样看待大疆的负面新闻</li><li>优缺点</li><li>对大疆的了解</li><li>职业规划</li><li>能不能来实习</li><li>有什么想问的<ul><li>这个问题准备的较为充分，我以自身项目结合，感觉回得比较好。</li></ul></li></ul><hr><ul><li>终面完还有DJI的分享会，Hr小姐姐主要讲述DJI发展历程、企业文化、工作环境、公司福利等</li><li>因为在DJI展厅面试的，面试完还参观了DJI全系列产品（赏心悦目的感觉）</li></ul><blockquote><p><code>小建议</code><br>最好有 Github开源项目，写一个漂亮清晰的介绍，终面的面试官似乎有在电脑上看我的Github项目<br>面试现场，可以准备一份作品介绍（有图有真相），也利用自身清晰的讲述项目<br>需要多了解面试公司的企业文化、产品（产品的优缺点、同类产品的比较）、优势领域</p></blockquote><h2 id="7-offer阶段"><a href="#7-offer阶段" class="headerlink" title="7.offer阶段"></a>7.offer阶段</h2><ul><li>2019.9.20<ul><li><code>电话沟通offer薪资、福利等</code></li></ul></li><li>2019.10.8<ul><li><code>签完三方协议，并回寄到学校</code></li></ul></li></ul><h2 id="8-”疆”来有你"><a href="#8-”疆”来有你" class="headerlink" title="8.”疆”来有你"></a>8.”疆”来有你</h2><ul><li>签约三方后送<code>Mavic Mini</code><ul><li>2019.12.25拿到mini，期待已久！这天刚好是圣诞节&amp;生日，算是圣诞&amp;生日礼物了 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8">🎁</span></li><li>一定是特别的缘分……</li></ul></li></ul><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/mavic-mini.jpg" alt=""></p><ul><li><code>mentor</code><ul><li>一般为入职的老员工（良师益友）</li></ul></li></ul><ul><li>邮箱整理：</li></ul><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/DJI_email1.png" alt=""></p><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/DJI_email2.png" alt=""></p><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/DJI_offer2.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/07/24/hello-world/"/>
      <url>/2019/07/24/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="1-参考资源"><a href="#1-参考资源" class="headerlink" title="1.参考资源"></a>1.参考资源</h2><ul><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Github Hexo</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 官网</a></li></ul><h2 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2.安装软件"></a>2.安装软件</h2><h3 id="2-1-Windows"><a href="#2-1-Windows" class="headerlink" title="2.1 Windows"></a>2.1 Windows</h3><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载官网</a></li><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs下载官网</a></li></ul><h3 id="2-2-Linux"><a href="#2-2-Linux" class="headerlink" title="2.2 Linux"></a>2.2 Linux</h3><ul><li><code>git</code></li></ul><pre><code>sudo apt-get install git</code></pre><ul><li><code>Nodejs</code></li></ul><pre><code>sudo apt-get install nodejs</code></pre><blockquote><p>安装完成,查看版本号,可检查是否安装成功</p></blockquote><ul><li><code>node -v</code></li><li><code>npm -v</code></li></ul><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><blockquote><p>以下命令都在<code>git bash</code>中输入运行</p></blockquote><ul><li>cd至需要创建的文件夹blog下，安装Hexo（Windows在<code>git bash</code>窗口中输入）</li></ul><pre><code>npm install -g hexo-cli  </code></pre><h2 id="4-快速创建"><a href="#4-快速创建" class="headerlink" title="4.快速创建"></a>4.快速创建</h2><h3 id="4-1-初始化博客"><a href="#4-1-初始化博客" class="headerlink" title="4.1 初始化博客"></a>4.1 初始化博客</h3><pre><code>hexo init blog</code></pre><ul><li>切换至博客目录</li></ul><pre><code>cd blog</code></pre><h3 id="4-2-创建文章"><a href="#4-2-创建文章" class="headerlink" title="4.2 创建文章"></a>4.2 创建文章</h3><pre><code>hexo new "Hello Hexo"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="4-3-生成静态文章"><a href="#4-3-生成静态文章" class="headerlink" title="4.3 生成静态文章"></a>4.3 生成静态文章</h3><pre><code>hexo generate</code></pre><ul><li>可简写为<code>hexo g</code></li></ul><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="4-4-启动服务"><a href="#4-4-启动服务" class="headerlink" title="4.4 启动服务"></a>4.4 启动服务</h3><blockquote><p>在预览时才需要用】启动hexo,会生成本地连接:localhost:4000<br>如果4000端口被占用可以用：hexo server -p 5000(指定端口5000)</p></blockquote><pre><code>hexo server</code></pre><ul><li>可简写为<code>hexo s</code><br>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></li></ul><h3 id="4-5-部署文章"><a href="#4-5-部署文章" class="headerlink" title="4.5 部署文章"></a>4.5 部署文章</h3><pre class=" language-c"><code class="language-c">hexo deploy</code></pre><ul><li>可简写为<code>hexo d</code><br>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></li></ul><h2 id="5-更换主题"><a href="#5-更换主题" class="headerlink" title="5.更换主题"></a>5.更换主题</h2><h3 id="5-1-下载"><a href="#5-1-下载" class="headerlink" title="5.1 下载"></a>5.1 下载</h3><p>点击不同的主题的代码，将其文件夹复制到你 Hexo 的 themes 文件夹中即可<br><strong>推荐的主题：</strong></p><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">matery</a></li><li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></li></ul><h3 id="5-2-更换主题"><a href="#5-2-更换主题" class="headerlink" title="5.2 更换主题"></a>5.2 更换主题</h3><blockquote><p>初始化默认主题为landscape</p></blockquote><p>切换主题修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：theme: <code>hexo-theme-matery</code></p><p><code>_config.yml</code>文件的其它修改建议:</p><ul><li>请修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io）" target="_blank" rel="noopener">http://xxx.github.io）</a></li><li>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示</li><li>如果你是中文用户，则建议修改 language 的值为 zh-CN</li></ul><h2 id="6-绑定域名CNAME"><a href="#6-绑定域名CNAME" class="headerlink" title="6.绑定域名CNAME"></a>6.绑定域名CNAME</h2><ul><li>当你点击保存的时候 Github Pages 会自动帮你生成一个 CNAME 的文件在根目录，里面的内容就是你绑定的域名地址</li></ul><p><img src="http://q2lxl3ulw.bkt.clouddn.com/ian-blog-images/CNAME.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观想之宙</title>
      <link href="/2019/06/28/the-three-body-problem-x/"/>
      <url>/2019/06/28/the-three-body-problem-x/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我看到了我的爱恋<br>我飞到她的身边<br>我捧出给她的礼物<br>那是一小块凝固的时间<br>时间上有美丽的条纹<br>摸起来像浅海的泥一样柔软<br>她把时间涂满全身<br>然后拉起我飞向存在的边缘<br>这是灵态的飞行<br>我们眼中的星星像幽灵<br>星星眼中的我们也像幽灵</p></blockquote><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>《三体X·观想之宙》是一本由<strong>宝树</strong>著作，重庆出版社出版，为大刘《三体》系列外传</p><h3 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h3><ul><li>宝树：北京大学本科、硕士，新锐<strong>科幻作家</strong>。<ul><li>著作：长篇小说《时间之墟》、短篇小说集《古老的地球之歌》</li><li>多次获得中国科幻银河奖、华语科幻星云奖等</li></ul></li></ul><h3 id="作品目录"><a href="#作品目录" class="headerlink" title="作品目录"></a>作品目录</h3><ul><li>1.楔子</li><li>2.上部：时间之内的往事</li><li>3.中部：茶道谈话</li><li>4.下部：天萼</li><li>5.尾声：普罗旺斯</li><li>6.后记</li><li>7.尾声之后：新宇宙纪事</li></ul><h1 id="二、阅读记录"><a href="#二、阅读记录" class="headerlink" title="二、阅读记录"></a>二、阅读记录</h1><h2 id="1、本书主要内容"><a href="#1、本书主要内容" class="headerlink" title="1、本书主要内容"></a>1、本书主要内容</h2><p>  本书主线或者说<strong>主要矛盾</strong>——<strong>“主宰”与“隐藏者”的斗争</strong>。  </p><p>  什么样的斗争？隐藏者的目的究竟是什么？主宰作为宇宙之主为什么会有敌手？开头设定“隐藏者”这一新角色，激发了极大的阅读兴趣。</p><p>  本书主人公为被三体人所复活的云天明，三体人不断用残酷的梦境折磨云天明说出其真实的目的，但是这种手段不仅没有让云天明屈服，反而使其逐渐锻炼出超卓的心智。</p><h2 id="2、本书中宇宙十维模型的解读"><a href="#2、本书中宇宙十维模型的解读" class="headerlink" title="2、本书中宇宙十维模型的解读"></a>2、本书中宇宙十维模型的解读</h2><p>原文中<strong>云天明</strong>与<strong>智子</strong>的对话</p><blockquote><p>“三维宇宙存在了多少时间？”他转向智子，目光炯炯地问。<br>“按地球年来计算，大概是138亿9400万年。”智子很快给出了答案。<br>“四维宇宙呢？”<br>“100万年。”<br>“五维宇宙是？”<br>“131年。”<br>“六维宇宙？”<br>“九天。”<br>“七维？”<br>“两分钟零三秒。”<br>“八维？”<br>“12毫秒。”<br>“九维？”<br>“31纳秒。”<br>云天明按捺住内心的兴奋，问出了最终一问：“那么，十维宇宙呢？”<br>智子罕见地沉默了片刻，然后说：“永恒。在十维宇宙中不需要时间。”<br>“我早该想到，”云天明喃喃道，“无限的速度，无限的效率，一切从开始就已经完成，瞬间达到完满，不需要任何间隔……这是一个没有时间的世界。”<br>“没有时间，没有运动，没有变化，没有过程……开始即结束！刹那即永恒！没有活生生的生命，只是无穷张胶片的叠加。这是一个——死亡的世界。”<br>“我不明白，”智子说，“我真的不明白你在说什么。完美的世界本来就不需要时间。时间只是……令人厌恶的延迟而已。”<br>“因为你是主宰的影子，”云天明说，“和主宰一样，时间就是你的盲点。你根本上并不是生活在时间里，你也永远看不到时间本身。我给你讲一个地球的神话吧。”<br>“我知道所有的地球神话。”智子不屑地说。<br>“但是你不一定能了解其意义，不是么？否则你可能早已经明白隐藏者的动机。在希腊神话里，天空之神乌拉诺斯和大地女神盖亚结合在一起，生出了许多的诸神。但是乌拉诺斯厌恶这些儿女们，用生殖器把他们顶回了盖亚的子宫，不让他们出世，而天与地也处于永恒的结合状态，无法分离。后来盖亚因为被乌拉诺斯所包围和挤压而感到痛苦，让她的儿女们去消灭父亲乌拉诺斯，最后她的儿子克洛诺斯砍下了乌拉诺斯的生殖器，让乌拉诺斯离开了盖亚，从此天与地分离，诸神出世，宇宙万物才具有了生机。”<br>“这个粗俗无趣的故事和十维宇宙的事有什么关系？”<br>“克洛诺斯就是希腊语的‘时间’。这是一个隐喻，时间让一切开始。隐藏者需要的就是时间，没有时间的宇宙，再大都太小了。所以隐藏者无法忍受，必须要降维。每降一次维，时间就延长至少上万倍。隐藏者不是疯子，也不是恶棍，他们只是需要一点——时间。”<br>“对于隐藏者来说，降维就是为了创造时间，所有消失的维度，都将通过时间获得补偿。它们——或者它们的一部分——都以某种方式被转移到了时间中！这就是降维的积极意义！没有降维就没有时间！”<br>“也可以这么说，我们早已经发现，时间本身是对光速降低的一种补偿性效应。”智子若有所思地说。</p></blockquote><p>  宝树将起源宇宙描述为十维世界（完美的世界）——“永恒。在十维宇宙中不需要时间。”光从世界的一端传到另一端，速度无限。</p><p>  “无限的速度,无限的效率，切从开始就已经完成，瞬间达到完满,不需要任何问间隔.-这是一个没有时间的世界。<br>“没有时间,没有运动， 没有变化，没有过程….始即结束!刹那即永恒!没有活生生的生命，只是无穷张胶片的叠加。这是一个死亡的世界!”<br>脑洞极为惊奇，但是却也是漏洞百出。</p><p>这也揭示了<strong>宇宙降维</strong>的真正原因——隐藏者需要的就是时间，没有时间的宇宙，再大都太小了。<br><strong>隐藏者</strong>不断让宇宙降维，以获取更多的时间。时间本身是对光速降低的一种补偿性效应。</p><h2 id="3-云天明的主角光环"><a href="#3-云天明的主角光环" class="headerlink" title="3.云天明的主角光环"></a>3.云天明的主角光环</h2><p>  不得不承认是主角，在某种程度上都会有一定的主角光环，在本书尤为明显。<br>在其与三体人无限梦境的斗争中，云天明大脑的思想或者说意识有了超出常人的跃进。<br>其拥有能逃避高科技探测意思的“思想黑箱”——简单来说，就是将自我意识，放入自己开辟的“黑箱”中，躲避高科技对其真实想法的探测。</p><h2 id="4、歌者与“王”之间的凄美爱情"><a href="#4、歌者与“王”之间的凄美爱情" class="headerlink" title="4、歌者与“王”之间的凄美爱情"></a>4、歌者与“王”之间的凄美爱情</h2><p>  在<strong>星渊族</strong>即将灭亡之时，歌者所吟唱也揭示了一部分本书的秘密。</p><blockquote><p>我看到了我的爱恋<br>我飞到她的身边<br>我捧出给她的礼物<br>那是一小块凝固的时间<br>时间上有美丽的条纹<br>摸起来像浅海的泥一样柔软<br>她把时间涂满全身<br>然后拉起我飞向存在的边缘<br>这是灵态的飞行<br>我们眼中的星星像幽灵<br>星星眼中的我们也像幽灵</p></blockquote><h2 id="5-感想"><a href="#5-感想" class="headerlink" title="5.感想"></a>5.感想</h2><p>  宇宙处于无限归零当中，宇宙不断衰减，衰减至尽，则重现归零，不知是毁灭还是新的重生，或许对于现宇宙当中的一部分为毁灭，对下一态宇宙为新的重生。</p><p>  无限轮回这个象征永恒的主题，把剧情推向了高潮，“一切有什么意义呢”——哲学最终极的问题。不变的轮回有意义吗？不断衰减的轮回又有意义吗？到底哪种是毁灭，哪种才是救赎？</p><p>  知乎网友八云说：“大刘曾经表示过：他本来有意继续写三体，但是因为宝树的三体X的出现，他放弃了。”<br>网上骂声一片，被形容成毁掉了一个这么好的IP，也确实，本来对其预期极高，但看完之后，略感失望。<br>不过本书也是有一些亮点，例如对<strong>宇宙降维</strong>的原因，虽然解释的优点荒诞，但不得不说脑洞惊奇；再者 对<strong>歌者</strong>的继续出境，引出一段凄美婉转的爱情故事。<br>最大的一点对主角云天明的过大夸张，有点对其某种意义上的“意淫”，略有浮夸。</p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MJPG-Streamer推流测试</title>
      <link href="/2018/12/02/raspberry-mjpg/"/>
      <url>/2018/12/02/raspberry-mjpg/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/jacksonliam/mjpg-streamer" target="_blank" rel="noopener">mjpg-streamer Github</a></p><p><kbd><strong>用到的工具材料</strong>：</kbd></p><ul><li><input checked="" disabled="" type="checkbox"> 树莓派3B+</li><li><input checked="" disabled="" type="checkbox"> 网线</li><li><input checked="" disabled="" type="checkbox"> 电脑</li><li><input checked="" disabled="" type="checkbox"> CSI摄像头</li><li><input checked="" disabled="" type="checkbox"> USB摄像头</li></ul><blockquote><p>实现的功能有：<br>①树莓派通过网线将CSI摄像头与USB摄像头的实时画面推流至上位机电脑中的显示<br>②实测双摄延时低至200ms以下</p></blockquote><p>我的另一篇博文中介绍了使用树莓派H.264硬件编解码推流CSI摄像头，所以本文仅介绍如何用 MJPG-Streamer推流USB摄像头实时画面。所以需要同时推流双摄时，可选择CSI+USB Camera或者双USB Camera。</p><h1 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h1><p>1.树莓派硬件连接与软件及驱动安装<br>2.上位机PC端的接收视频流<br>3.延迟效果测试</p><h2 id="1-硬件连接与软件及驱动配置"><a href="#1-硬件连接与软件及驱动配置" class="headerlink" title="1.硬件连接与软件及驱动配置"></a>1.硬件连接与软件及驱动配置</h2><h3 id="1）检测是否存在USB摄像头设备"><a href="#1）检测是否存在USB摄像头设备" class="headerlink" title="1）检测是否存在USB摄像头设备"></a>1）检测是否存在USB摄像头设备</h3><p>输入以下指令：</p><pre><code>pi@raspberrypi:~ $ lsusb</code></pre><ul><li>未插入USB摄像头</li></ul><pre><code>pi@raspberrypi:~ $ lsusb Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet AdapterBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</code></pre><ul><li>插入USB摄像头</li></ul><pre><code>pi@raspberrypi:~ $ lsusbBus 001 Device 004: ID 05a3:9230 ARC InternationalBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet AdapterBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</code></pre><pre><code>pi@raspberrypi:~ $ v4l2-ctl --list-formats</code></pre><pre><code>pi@raspberrypi:~ $ v4l2-ctl --list-formatsioctl: VIDIOC_ENUM_FMT        Index       : 0        Type        : Video Capture        Pixel Format: 'MJPG' (compressed)        Name        : Motion-JPEG        Index       : 1        Type        : Video Capture        Pixel Format: 'YUYV'        Name        : YUYV 4:2:2</code></pre><table>    <tbody><tr>        <td><center><img src="https://img-blog.csdnimg.cn/20181202170523751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70">图1  还未插入USB摄像头 </center></td>        <td><center><img src="https://img-blog.csdnimg.cn/20181202170531278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70">图2 插入USB摄像头</center></td></tr></tbody></table><h3 id="2）安装-MJPG-Streamer-from-github"><a href="#2）安装-MJPG-Streamer-from-github" class="headerlink" title="2）安装 MJPG-Streamer from github"></a>2）安装 MJPG-Streamer from github</h3><blockquote><p>按照以下命令安装MJPG-Streamer及其相关配置 每一行为一个命令</p></blockquote><pre><code>sudo apt-get install cmake libjpeg8-devwget https://github.com/jacksonliam/mjpg-streamer/archive/master.zipunzip master.zipcd mjp*g-*cd mjpg-*makesudo make installcd $home</code></pre><p>流程如下<br><img src="https://img-blog.csdnimg.cn/2018120219295880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="3）启动MJPG-Streamer"><a href="#3）启动MJPG-Streamer" class="headerlink" title="3）启动MJPG-Streamer"></a>3）启动MJPG-Streamer</h3><blockquote><p>启动如下指令：<br>TCP端口8085被指定为输出端口，以确保没有对其他任何东西的干扰。</p></blockquote><pre><code>/usr/local/bin/mjpg_streamer -i "/usr/local/lib/mjpg-streamer/input_uvc.so -n -f 10 -r 1280x720" -o "/usr/local/lib/mjpg-streamer/output_http.so -p 8085 -w /usr/local/share/mjpg-streamer/www"</code></pre><p><img src="https://img-blog.csdnimg.cn/20181202185954705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt="树莓派推流成功"></p><p><strong>如上图所示，推流已经完成，分辨率为720P(1280X720)，端口号为8085，到此树莓派的任务已经完成</strong></p><pre><code>pi@raspberrypi:~ $ /usr/local/bin/mjpg_streamer -i "/usr/local/lib/mjpg-streamer/input_uvc.so -n -f 10 -r 1280x720" -o "/usr/local/lib/mjpg-streamer/output_http.so -p 8085 -w /usr/local/share/mjpg-streamer/www"MJPG Streamer Version.: 2.0 i: Using V4L2 device.: /dev/video0 i: Desired Resolution: 1280 x 720 i: Frames Per Second.: 10 i: Format............: JPEG i: TV-Norm...........: DEFAULT i: FPS coerced ......: from 10 to 60 o: www-folder-path......: /usr/local/share/mjpg-streamer/www/ o: HTTP TCP port........: 8085 o: HTTP Listen Address..: (null) o: username:password....: disabled o: commands.............: enabled</code></pre><h3 id="4）开启指定摄像头"><a href="#4）开启指定摄像头" class="headerlink" title="4）开启指定摄像头"></a>4）开启指定摄像头</h3><ul><li>USB设备存在两个摄像头</li></ul><p><img src="https://img-blog.csdnimg.cn/20190507154817290.png" alt=""></p><ul><li>如果你有多个摄像头，也可以开启多个摄像头</li><li>-d /dev/video1    参数标明需要开启的摄像头</li></ul><pre><code>/usr/local/bin/mjpg_streamer -i "/usr/local/lib/mjpg-streamer/input_uvc.so -d /dev/video1 -n -f 10 -r 1280x720" -o "/usr/local/lib/mjpg-streamer/output_http.so -p 8085 -w /usr/local/share/mjpg-streamer/www"</code></pre><h2 id="2-上位机PC端的接收视频流"><a href="#2-上位机PC端的接收视频流" class="headerlink" title="2.上位机PC端的接收视频流"></a>2.上位机PC端的接收视频流</h2><blockquote><p>采用web网页接收视频流</p></blockquote><p>打开浏览器输入：</p><pre><code>http://树莓派ip地址:开启的端口号</code></pre><pre><code>// A case in point 例如：http://192.168.2.150:8085</code></pre><blockquote><p>输入 <a href="http://192.168.2.150:8085" target="_blank" rel="noopener">http://192.168.2.150:8085</a>   打开后如下图：为MJPG Streamer 首页<br><img src="https://img-blog.csdnimg.cn/20181202190911467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p></blockquote><ul><li>查看视频点击Stream<br><img src="https://img-blog.csdnimg.cn/20181202190927946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></li></ul><p>看到网页中有树莓派USB摄像头拍摄的画面，证明视频推流成功。</p><h2 id="3-双摄延迟效果测试"><a href="#3-双摄延迟效果测试" class="headerlink" title="3.双摄延迟效果测试"></a>3.双摄延迟效果测试</h2><blockquote><p>我们打开一个在线秒表，让其开始计时，而后我们用树莓派CSI摄像头及USB摄像头去拍摄电脑屏幕，然后截屏，计算拍摄的时间与秒表实际时间的差值，可以粗略测得延时的结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181202191338911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"如上图所示"</span>    在线秒表为<span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">697</span>  USB摄像头（Web MJPG<span class="token operator">-</span>Streamer）推流视频中的在线秒表为<span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">567</span>  CSI摄像头（MPlayer  视频播放器）推流视频中的在线秒表为<span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">525</span>其差值△t1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span>130s<span class="token operator">=</span>130ms                  △t1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span>172s<span class="token operator">=</span>172ms</code></pre><p>之后我通过多次测试多种组合得到如下图数据（仅做参考）：</p><p><img src="https://img-blog.csdnimg.cn/20181202192130874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p><p>总结：</p><pre class=" language-javascript"><code class="language-javascript">   分辨率都为 720P  延迟大致为<span class="token number">100</span><span class="token operator">-</span>200ms之间<span class="token punctuation">[</span>带光纤延迟增加并不明显<span class="token punctuation">]</span>   分辨率都为 1080P 延迟为<span class="token number">200</span><span class="token operator">-</span>300ms</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSI摄像头推流</title>
      <link href="/2018/11/28/raspberry-raspivid/"/>
      <url>/2018/11/28/raspberry-raspivid/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/jacksonliam/mjpg-streamer" target="_blank" rel="noopener">mjpg-streamer Github</a></p><p><kbd><strong>用到的工具材料</strong>：</kbd></p><ul><li><input checked="" disabled="" type="checkbox"> 树莓派3B+</li><li><input checked="" disabled="" type="checkbox"> 网线</li><li><input checked="" disabled="" type="checkbox"> 电脑</li><li><input checked="" disabled="" type="checkbox"> CSI摄像头</li><li><input checked="" disabled="" type="checkbox"> USB摄像头</li></ul><blockquote><p>实现的功能有：<br>①树莓派通过网线将CSI摄像头与USB摄像头的实时画面推流至上位机电脑中的显示<br>②实测双摄延时低至200ms以下</p></blockquote><p>我的另一篇博文中介绍了使用树莓派H.264硬件编解码推流CSI摄像头，所以本文仅介绍如何用 MJPG-Streamer推流USB摄像头实时画面。所以需要同时推流双摄时，可选择CSI+USB Camera或者双USB Camera。</p><table>    <tbody><tr>        <td><center><img src="https://img-blog.csdnimg.cn/20181128153213623.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70">图1  树莓派接线整体图 </center></td>        <td><center><img src="https://img-blog.csdnimg.cn/20181128154230707.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70">图2 树莓派接线整体图</center></td></tr></tbody></table><h1 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h1><p>1.树莓派硬件连接与软件及驱动安装<br>2.上位机PC端的接收视频流<br>3.延迟效果测试</p><h2 id="1-硬件连接与软件及驱动配置"><a href="#1-硬件连接与软件及驱动配置" class="headerlink" title="1.硬件连接与软件及驱动配置"></a>1.硬件连接与软件及驱动配置</h2><h3 id="1）检测是否存在USB摄像头设备"><a href="#1）检测是否存在USB摄像头设备" class="headerlink" title="1）检测是否存在USB摄像头设备"></a>1）检测是否存在USB摄像头设备</h3><p>输入以下指令：</p><pre><code>pi@raspberrypi:~ $ lsusb</code></pre><ul><li>未插入USB摄像头</li></ul><pre><code>pi@raspberrypi:~ $ lsusb Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet AdapterBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</code></pre><ul><li>插入USB摄像头</li></ul><pre><code>pi@raspberrypi:~ $ lsusbBus 001 Device 004: ID 05a3:9230 ARC InternationalBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet AdapterBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</code></pre><pre><code>pi@raspberrypi:~ $ v4l2-ctl --list-formats</code></pre><pre><code>pi@raspberrypi:~ $ v4l2-ctl --list-formatsioctl: VIDIOC_ENUM_FMT        Index       : 0        Type        : Video Capture        Pixel Format: 'MJPG' (compressed)        Name        : Motion-JPEG        Index       : 1        Type        : Video Capture        Pixel Format: 'YUYV'        Name        : YUYV 4:2:2</code></pre><table>    <tbody><tr>        <td><center><img src="https://img-blog.csdnimg.cn/20181202170523751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70">图1  还未插入USB摄像头 </center></td>        <td><center><img src="https://img-blog.csdnimg.cn/20181202170531278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70">图2 插入USB摄像头</center></td></tr></tbody></table><h3 id="2）安装-MJPG-Streamer-from-github"><a href="#2）安装-MJPG-Streamer-from-github" class="headerlink" title="2）安装 MJPG-Streamer from github"></a>2）安装 MJPG-Streamer from github</h3><blockquote><p>按照以下命令安装MJPG-Streamer及其相关配置 每一行为一个命令</p></blockquote><pre><code>sudo apt-get install cmake libjpeg8-devwget https://github.com/jacksonliam/mjpg-streamer/archive/master.zipunzip master.zipcd mjp*g-*cd mjpg-*makesudo make installcd $home</code></pre><p>流程如下<br><img src="https://img-blog.csdnimg.cn/2018120219295880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="3）启动MJPG-Streamer"><a href="#3）启动MJPG-Streamer" class="headerlink" title="3）启动MJPG-Streamer"></a>3）启动MJPG-Streamer</h3><blockquote><p>启动如下指令：<br>TCP端口8085被指定为输出端口，以确保没有对其他任何东西的干扰。</p></blockquote><pre><code>/usr/local/bin/mjpg_streamer -i "/usr/local/lib/mjpg-streamer/input_uvc.so -n -f 10 -r 1280x720" -o "/usr/local/lib/mjpg-streamer/output_http.so -p 8085 -w /usr/local/share/mjpg-streamer/www"</code></pre><p><img src="https://img-blog.csdnimg.cn/20181202185954705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt="树莓派推流成功"></p><p><strong>如上图所示，推流已经完成，分辨率为720P(1280X720)，端口号为8085，到此树莓派的任务已经完成</strong></p><pre><code>pi@raspberrypi:~ $ /usr/local/bin/mjpg_streamer -i "/usr/local/lib/mjpg-streamer/input_uvc.so -n -f 10 -r 1280x720" -o "/usr/local/lib/mjpg-streamer/output_http.so -p 8085 -w /usr/local/share/mjpg-streamer/www"MJPG Streamer Version.: 2.0 i: Using V4L2 device.: /dev/video0 i: Desired Resolution: 1280 x 720 i: Frames Per Second.: 10 i: Format............: JPEG i: TV-Norm...........: DEFAULT i: FPS coerced ......: from 10 to 60 o: www-folder-path......: /usr/local/share/mjpg-streamer/www/ o: HTTP TCP port........: 8085 o: HTTP Listen Address..: (null) o: username:password....: disabled o: commands.............: enabled</code></pre><h3 id="4）开启指定-多个摄像头"><a href="#4）开启指定-多个摄像头" class="headerlink" title="4）开启指定/多个摄像头"></a>4）开启指定/多个摄像头</h3><ul><li>USB设备存在两个摄像头</li></ul><p><img src="https://img-blog.csdnimg.cn/20190507154817290.png" alt=""></p><ul><li>如果你有多个摄像头，也可以开启多个摄像头</li><li>-d /dev/video1    参数标明需要开启的摄像头</li></ul><pre><code>/usr/local/bin/mjpg_streamer -i "/usr/local/lib/mjpg-streamer/input_uvc.so -d /dev/video1 -n -f 10 -r 1280x720" -o "/usr/local/lib/mjpg-streamer/output_http.so -p 8085 -w /usr/local/share/mjpg-streamer/www"</code></pre><h2 id="2-上位机PC端的接收视频流"><a href="#2-上位机PC端的接收视频流" class="headerlink" title="2.上位机PC端的接收视频流"></a>2.上位机PC端的接收视频流</h2><blockquote><p>采用web网页接收视频流</p></blockquote><p>打开浏览器输入：</p><pre><code>http://树莓派ip地址:开启的端口号</code></pre><pre><code>// A case in point 例如：http://192.168.2.150:8085</code></pre><blockquote><p>输入 <a href="http://192.168.2.150:8085" target="_blank" rel="noopener">http://192.168.2.150:8085</a>   打开后如下图：为MJPG Streamer 首页<br><img src="https://img-blog.csdnimg.cn/20181202190911467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p></blockquote><ul><li>查看视频点击Stream</li></ul><p><img src="https://img-blog.csdnimg.cn/20181202190927946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p><p>看到网页中有树莓派USB摄像头拍摄的画面，证明视频推流成功。</p><h2 id="3-双摄延迟效果测试"><a href="#3-双摄延迟效果测试" class="headerlink" title="3.双摄延迟效果测试"></a>3.双摄延迟效果测试</h2><blockquote><p>我们打开一个在线秒表，让其开始计时，而后我们用树莓派CSI摄像头及USB摄像头去拍摄电脑屏幕，然后截屏，计算拍摄的时间与秒表实际时间的差值，可以粗略测得延时的结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181202191338911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p><p>“如上图所示”    在线秒表为1.18.697<br>USB摄像头（Web MJPG-Streamer）推流视频中的在线秒表为1.18.567<br>CSI摄像头（MPlayer  视频播放器）推流视频中的在线秒表为1.18.525<br>其差值△t1=0.130s=130ms                  △t1=0.172s=172ms</p><p>之后我通过多次测试多种组合得到如下图数据（仅做参考）：</p><p><img src="https://img-blog.csdnimg.cn/20181202192130874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkyOTMy,size_16,color_FFFFFF,t_70" alt=""></p><p>总结：</p><pre><code>   分辨率都为 720P  延迟大致为100-200ms之间[带光纤延迟增加并不明显]   分辨率都为 1080P 延迟为200-300ms</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
